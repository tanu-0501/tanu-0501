import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
class Contact 
{
    private String name;
    private String phoneNumber;
    private String email;
    public Contact(String name, String phoneNumber, String email) 
  {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.email = email;
    }
    public String getName()
  {
        return name;
    }
    public void setName(String name)
  {
        this.name = name;
    }
    public String getPhoneNumber()
  {
        return phoneNumber;
    }
    public void setPhoneNumber(String phoneNumber) 
  {
        this.phoneNumber = phoneNumber;
    }
    public String getEmail()
  {
        return email;
    }
    public void setEmail(String email) 
  {
        this.email = email;
    }
    public void displayContact()
  {
        System.out.println("Name: " + name);
        System.out.println("Phone Number: " + phoneNumber);
        System.out.println("Email: " + email);
    }
}
interface AddressBookOperations 
{
    void addContact(Contact contact);
    void viewAllContacts();
    Contact searchContactByName(String name);
}
class AddressBook implements AddressBookOperations 
{
    private List<Contact> contacts;
    public AddressBook()
  {
        contacts = new ArrayList<>();
    }
    @Override
    public void addContact(Contact contact) 
  {
        contacts.add(contact);
        System.out.println("Contact added successfully!");
    }
    @Override
    public void viewAllContacts() 
  {
        if (contacts.isEmpty()) 
        {
            System.out.println("No contacts available.");
        }
        else 
        {
            System.out.println("All Contacts:");
            for (Contact contact : contacts)
              {
                contact.displayContact();
                System.out.println("-------------------------");
            }
        }
    }
    @Override
    public Contact searchContactByName(String name)
  {
        for (Contact contact : contacts) 
        {
            if (contact.getName().equalsIgnoreCase(name))
            {
                return contact;
            }
        }
        return null;
    }
}
public class AddressBookApplication
  {
    public static void main(String[] args) 
  {
        AddressBook addressBook = new AddressBook();
        Scanner scanner = new Scanner(System.in);
        while (true) 
        {
            System.out.println("Address Book Menu:");
            System.out.println("1. Add a new contact");
            System.out.println("2. View all contacts");
            System.out.println("3. Search for a contact by name");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  
            switch (choice) 
            {
                case 1:
                    System.out.print("Enter name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter phone number: ");
                    String phoneNumber = scanner.nextLine();
                    System.out.print("Enter email: ");
                    String email = scanner.nextLine();
                    Contact newContact = new Contact(name, phoneNumber, email);
                    addressBook.addContact(newContact);
                    break;
                case 2:
                    addressBook.viewAllContacts();
                    break;
                case 3:
                    System.out.print("Enter name to search: ");
                    String searchName = scanner.nextLine();
                    Contact foundContact = addressBook.searchContactByName(searchName);
                    if (foundContact != null) 
                    {
                        System.out.println("Contact found:");
                        foundContact.displayContact();
                    }
                    else 
                    {
                        System.out.println("Contact not found.");
                    }
                    break;
                case 4:
                    System.out.println("Exiting Address Book. Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
                    break;
            }
        }
    }
}
